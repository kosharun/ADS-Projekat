{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kosharun\\\\Desktop\\\\moja-app\\\\src\\\\contexts\\\\ThemeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\n// Create the theme context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  theme: \"light\",\n  toggleTheme: () => {}\n});\n\n// Custom hook to use the theme context\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n\n// Theme provider component\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ThemeProvider({\n  children\n}) {\n  _s2();\n  // Check if theme is stored in localStorage, default to light\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem(\"theme\");\n    return savedTheme || \"light\";\n  });\n\n  // Update theme in localStorage and document when it changes\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n\n    // Update the document's data-theme attribute\n    document.documentElement.setAttribute(\"data-theme\", theme);\n\n    // Also add/remove the dark class for Tailwind dark mode\n    if (theme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [theme]);\n\n  // Toggle between light and dark themes\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\");\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n}\n_s2(ThemeProvider, \"g7BjfxE1gl+WHXOsyUn7FZCIqms=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","ThemeContext","theme","toggleTheme","useTheme","ThemeProvider","children","setTheme","savedTheme","localStorage","getItem","setItem","document","documentElement","setAttribute","classList","add","remove","prevTheme","Provider","value","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kosharun/Desktop/moja-app/src/contexts/ThemeContext.jsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { createContext, useContext, useEffect, useState } from \"react\"\r\n\r\n// Create the theme context\r\nconst ThemeContext = createContext({\r\n  theme: \"light\",\r\n  toggleTheme: () => {},\r\n})\r\n\r\n// Custom hook to use the theme context\r\nexport const useTheme = () => useContext(ThemeContext)\r\n\r\n// Theme provider component\r\nexport function ThemeProvider({ children }) {\r\n  // Check if theme is stored in localStorage, default to light\r\n  const [theme, setTheme] = useState(() => {\r\n    const savedTheme = localStorage.getItem(\"theme\")\r\n    return savedTheme || \"light\"\r\n  })\r\n\r\n  // Update theme in localStorage and document when it changes\r\n  useEffect(() => {\r\n    localStorage.setItem(\"theme\", theme)\r\n\r\n    // Update the document's data-theme attribute\r\n    document.documentElement.setAttribute(\"data-theme\", theme)\r\n\r\n    // Also add/remove the dark class for Tailwind dark mode\r\n    if (theme === \"dark\") {\r\n      document.documentElement.classList.add(\"dark\")\r\n    } else {\r\n      document.documentElement.classList.remove(\"dark\")\r\n    }\r\n  }, [theme])\r\n\r\n  // Toggle between light and dark themes\r\n  const toggleTheme = () => {\r\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"))\r\n  }\r\n\r\n  return <ThemeContext.Provider value={{ theme, toggleTheme }}>{children}</ThemeContext.Provider>\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;EAAAC,GAAA,GAAAD,YAAA;AAEZ,SAASE,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAEtE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGN,aAAa,CAAC;EACjCO,KAAK,EAAE,OAAO;EACdC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA;EAAAZ,EAAA;EAAA,OAAMI,UAAU,CAACK,YAAY,CAAC;AAAA;;AAEtD;AAAAT,EAAA,CAFaY,QAAQ;AAGrB,OAAO,SAASC,aAAaA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAZ,GAAA;EAC1C;EACA,MAAM,CAACQ,KAAK,EAAEK,QAAQ,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACvC,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,OAAOF,UAAU,IAAI,OAAO;EAC9B,CAAC,CAAC;;EAEF;EACAX,SAAS,CAAC,MAAM;IACdY,YAAY,CAACE,OAAO,CAAC,OAAO,EAAET,KAAK,CAAC;;IAEpC;IACAU,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEZ,KAAK,CAAC;;IAE1D;IACA,IAAIA,KAAK,KAAK,MAAM,EAAE;MACpBU,QAAQ,CAACC,eAAe,CAACE,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLJ,QAAQ,CAACC,eAAe,CAACE,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC,EAAE,CAACf,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBI,QAAQ,CAAEW,SAAS,IAAMA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACrE,CAAC;EAED,oBAAOlB,OAAA,CAACC,YAAY,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAElB,KAAK;MAAEC;IAAY,CAAE;IAAAG,QAAA,EAAEA;EAAQ;IAAAe,QAAA,EAAA9B,YAAA;IAAA+B,UAAA;IAAAC,YAAA;EAAA,OAAwB,CAAC;AACjG;AAAC7B,GAAA,CA5BeW,aAAa;AAAAmB,EAAA,GAAbnB,aAAa;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}